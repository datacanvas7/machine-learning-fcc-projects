# -*- coding: utf-8 -*-
"""health-cost-calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TLY5JWq9aOZ9wVt6mI8OpMxzDyc7Qa0j

# Health Costs Calculator Using Linear Regression

## 1. Data Loading & Exploration
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from sklearn.model_selection import train_test_split

# Load the dataset
df = pd.read_csv("insurance.csv")

# Display dataset info
print(df.info())
print("\nFirst 5 rows:")
print(df.head())

"""## 2. Data Preprocessing

"""

def preprocess_data(df, test_size=0.2, random_state=42):
    """Preprocess data including categorical conversion and train-test split"""
    # Convert categorical features
    categorical_cols = ['sex', 'smoker', 'region']
    df = pd.get_dummies(df, columns=categorical_cols, prefix='', prefix_sep='')

    # Split into features and labels
    labels = df.pop('expenses')

    # Split into train and test
    train_df, test_df, train_labels, test_labels = train_test_split(
        df, labels, test_size=test_size, random_state=random_state
    )

    return train_df, test_df, train_labels, test_labels

train_dataset, test_dataset, train_labels, test_labels = preprocess_data(df)

"""## 3. Model Building & Training

"""

def build_model(input_shape):
    """Build and compile a sequential regression model"""
    model = keras.Sequential([
        layers.Dense(64, activation='relu', input_shape=[input_shape]),
        layers.Dense(64, activation='relu'),
        layers.Dense(1)
    ])

    optimizer = tf.keras.optimizers.RMSprop(0.001)

    model.compile(
        loss='mse',
        optimizer=optimizer,
        metrics=['mae', 'mse']
    )

    return model

# Build model
model = build_model(len(train_dataset.keys()))

# Train model
history = model.fit(
    train_dataset,
    train_labels,
    epochs=100,
    validation_split=0.2,
    verbose=0,
    callbacks=[keras.callbacks.EarlyStopping(patience=10)]
)

"""## 4. Evaluation & Testing

To ensure your model meets the requirement of MAE < 3500
"""

def plot_history(history):
    """Plot training and validation metrics"""
    hist = pd.DataFrame(history.history)
    hist['epoch'] = history.epoch

    plt.figure()
    plt.xlabel('Epoch')
    plt.ylabel('Mean Abs Error [expenses]')
    plt.plot(hist['epoch'], hist['mae'], label='Train Error')
    plt.plot(hist['epoch'], hist['val_mae'], label='Val Error')
    plt.ylim([0, 5000])
    plt.legend()

    plt.figure()
    plt.xlabel('Epoch')
    plt.ylabel('Mean Square Error [$expenses^2$]')
    plt.plot(hist['epoch'], hist['mse'], label='Train Error')
    plt.plot(hist['epoch'], hist['val_mse'], label='Val Error')
    plt.ylim([0, 35000000])
    plt.legend()
    plt.show()

# Evaluate the model
loss, mae, mse = model.evaluate(test_dataset, test_labels, verbose=2)
print(f"\nTesting set Mean Abs Error: ${mae:0.2f}")

# Plot training history
plot_history(history)

# Make predictions
test_predictions = model.predict(test_dataset).flatten()

# Plot predictions vs actual
plt.figure(figsize=(10, 6))
plt.scatter(test_labels, test_predictions)
plt.xlabel('True Values [expenses]')
plt.ylabel('Predictions [expenses]')
plt.axis('equal')
plt.axis('square')
plt.xlim([0, plt.xlim()[1]])
plt.ylim([0, plt.ylim()[1]])
_ = plt.plot([-100, 100], [-100, 100], 'r--')
plt.show()

# Plot error distribution
error = test_predictions - test_labels
plt.hist(error, bins=25)
plt.xlabel("Prediction Error [expenses]")
_ = plt.ylabel("Count")
plt.show()

"""## 5. Explanation

- **Model Type**: Uses neural network with 2 hidden layers (64 nodes each) for regression
- **Input**: Processes insurance data (age, BMI, smoking status, etc.) after converting categories to numbers  
- **Training**: Learns patterns in healthcare costs using 80% of data, validates on 20%  
- **Goal**: Predicts medical expenses within $3,500 error (Mean Absolute Error)

---
"""